---
description: 
globs: backend/*
alwaysApply: false
---
# Regras Backend - Finnantech V2
## Arquitetura Hexagonal + Testes Obrigatórios

### 🎯 REGRAS FUNDAMENTAIS OBRIGATÓRIAS

**1. ARQUITETURA HEXAGONAL OBRIGATÓRIA**
- Toda funcionalidade DEVE seguir Ports & Adapters
- Core nunca depende de infraestrutura
- Dependency Inversion em todas as camadas

**2. TESTES UNITÁRIOS OBRIGATÓRIOS**
- Cobertura mínima: 90%
- Toda funcionalidade nova/alterada DEVE ter testes
- Usar JUnit 5 + Mockito + AssertJ

**3. TESTES DE ARQUITETURA OBRIGATÓRIOS**
- ArchUnit para validar regras arquiteturais
- Executar a cada build
- 100% de compliance

---

## 📁 ESTRUTURA OBRIGATÓRIA

```
backend/
├── src/main/java/com/finnantech/
│   ├── domain/                    # 🔵 CORE - Domínio da aplicação
│   │   ├── entities/              # Entidades de negócio
│   │   ├── valueobjects/          # Value Objects
│   │   ├── services/              # Serviços de domínio
│   │   ├── repositories/          # Interfaces de repositório (PORTS)
│   │   └── exceptions/            # Exceções de domínio
│   ├── application/               # 🟡 CASOS DE USO
│   │   ├── usecases/              # Use Cases
│   │   ├── ports/                 # Interfaces (input/output ports)
│   │   │   ├── in/                # Input ports (comandos)
│   │   │   └── out/               # Output ports (interfaces)
│   │   └── services/              # Application Services
│   └── infrastructure/            # 🟢 ADAPTADORES
│       ├── adapters/              # Adaptadores externos
│       │   ├── web/               # Controllers REST
│       │   ├── persistence/       # Implementações JPA
│       │   ├── messaging/         # Message brokers
│       │   └── external/          # APIs externas
│       ├── config/                # Configurações Spring
│       └── security/              # Segurança
├── src/test/java/                 # 🧪 TESTES OBRIGATÓRIOS
│   ├── unit/                      # Testes unitários
│   ├── integration/               # Testes de integração
│   └── architecture/              # Testes de arquitetura
```

---

## 🏗️ IMPLEMENTAÇÃO OBRIGATÓRIA

### 🔵 DOMAIN (Core)
```java
// Exemplo: Entidade de Domínio
@Entity
public class Transaction {
    private TransactionId id;
    private Money amount;
    private TransactionDate date;
    private TransactionType type;
    private Category category;
    
    // Business logic aqui
    public void categorize(Category category) {
        if (this.category != null) {
            throw new TransactionAlreadyCategorizedException();
        }
        this.category = category;
    }
}
```

### 🟡 APPLICATION (Use Cases)
```java
// Exemplo: Use Case
@UseCase
public class CreateTransactionUseCase implements CreateTransactionInputPort {
    
    private final TransactionRepository transactionRepository;
    private final NotificationOutputPort notificationPort;
    
    @Override
    public TransactionResponse create(CreateTransactionCommand command) {
        // 1. Validações de negócio
        // 2. Criação da entidade
        // 3. Persistência
        // 4. Notificações
    }
}
```

### 🟢 INFRASTRUCTURE (Adapters)
```java
// Exemplo: Adapter de Persistência
@Component
public class TransactionJpaAdapter implements TransactionRepository {
    
    private final TransactionJpaRepository jpaRepository;
    
    @Override
    public Transaction save(Transaction transaction) {
        return jpaRepository.save(TransactionEntity.from(transaction))
                           .toDomain();
    }
}
```

---

## 🧪 TESTES OBRIGATÓRIOS

### ✅ DEFINITION OF DONE

Uma funcionalidade só está PRONTA quando:
- ✅ Implementa arquitetura hexagonal
- ✅ Testes unitários ≥ 90% cobertura
- ✅ Testes de arquitetura passando
- ✅ Code review aprovado
- ✅ Pipeline CI/CD verde

### 📝 TIPOS DE TESTE OBRIGATÓRIOS

**1. Testes Unitários de Entidades**
```java
@Test
@DisplayName("Deve criar transação válida")
void shouldCreateValidTransaction() {
    // Given
    Transaction transaction = TransactionBuilder.create()
        .withAmount(Money.of(100.00))
        .build();
    Category category = CategoryBuilder.create()
        .withName("Alimentação")
        .build();
    
    // When
    transaction.categorize(category);
    
    // Then
    assertThat(transaction.getCategory()).isEqualTo(category);
}
```

**2. Testes de Use Case**
```java
@ExtendWith(MockitoExtension.class)
class CreateTransactionUseCaseTest {
    @Mock TransactionRepository repository;
    @Mock NotificationOutputPort notificationPort;
    @InjectMocks CreateTransactionUseCase useCase;
    
    @Test
    @DisplayName("Deve criar transação com sucesso")
    void shouldCreateTransactionSuccessfully() {
        // Given
        CreateTransactionCommand command = CreateTransactionCommand.builder()
            .amount(BigDecimal.valueOf(100.00))
            .description("Compra no supermercado")
            .build();
        
        Transaction savedTransaction = TransactionBuilder.create()
            .withId(TransactionId.generate())
            .build();
        
        when(repository.save(any(Transaction.class)))
            .thenReturn(savedTransaction);
        
        // When
        TransactionResponse response = useCase.create(command);
        
        // Then
        assertThat(response.getId()).isEqualTo(savedTransaction.getId());
        verify(repository).save(any(Transaction.class));
        verify(notificationPort).sendTransactionCreatedNotification(any());
    }
}
```

**3. Testes de Arquitetura (OBRIGATÓRIOS)**
```java
class ArchitectureTest {
    
    @ArchTest
    static final ArchRule domainShouldNotDependOnInfrastructure = 
        noClasses()
            .that().resideInAPackage("..domain..")
            .should().dependOnClassesThat()
            .resideInAPackage("..infrastructure..");
    
    @ArchTest
    static final ArchRule applicationShouldNotDependOnInfrastructure = 
        noClasses()
            .that().resideInAPackage("..application..")
            .should().dependOnClassesThat()
            .resideInAPackage("..infrastructure..");
    
    @ArchTest
    static final ArchRule onlyUseCasesShouldBeAnnotatedWithUseCase =
        classes()
            .that().areAnnotatedWith(UseCase.class)
            .should().resideInAPackage("..application.usecases..");
}
```

---

## 🛠 FERRAMENTAS OBRIGATÓRIAS

### Stack Tecnológico
- **Framework**: Spring Boot 3.2+
- **Java**: 17+ (LTS)
- **Build**: Maven
- **Database**: MySQL 8.0+ / H2 (desenvolvimento)
- **Tests**: JUnit 5 + Mockito + ArchUnit + TestContainers

### Dependências Essenciais
```xml
<dependencies>
    <!-- Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    
    <!-- Tests -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <scope>test</scope>
    </dependency>
    
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <scope>test</scope>
    </dependency>
    
    <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <scope>test</scope>
    </dependency>
    
    <!-- ArchUnit -->
    <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit-junit5</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

---

## 📏 PADRÕES OBRIGATÓRIOS

### Nomenclatura
- **Entidades**: `Transaction`, `User`, `Category`
- **Value Objects**: `Money`, `TransactionDate`, `UserId`
- **Use Cases**: `CreateTransactionUseCase`, `GetUserProfileUseCase`
- **Repositories**: `TransactionRepository` (interface), `TransactionJpaAdapter` (implementação)
- **Controllers**: `TransactionController`, `UserController`

### Anotações Customizadas
```java
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Service
public @interface UseCase {
}

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Component
public @interface DomainService {
}
```

### Tratamento de Erros
```java
// Domain Exception
public class TransactionAlreadyCategorizedException extends DomainException {
    public TransactionAlreadyCategorizedException() {
        super("Transaction is already categorized and cannot be categorized again");
    }
}

// Global Exception Handler
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(DomainException.class)
    public ResponseEntity<ErrorResponse> handleDomainException(DomainException ex) {
        return ResponseEntity.badRequest()
            .body(ErrorResponse.builder()
                .message(ex.getMessage())
                .timestamp(Instant.now())
                .build());
    }
}
```

---

## ⚙️ COMANDOS DE VERIFICAÇÃO

### Antes de qualquer commit
```bash
cd backend

# Roda todos os testes
mvn clean test

# Gera relatório de cobertura
mvn jacoco:report

# Valida regras arquiteturais
mvn archunit:verify

# Compila o projeto
mvn compile
```

---

## 🚨 REGRAS CRÍTICAS - NUNCA QUEBRAR

1. **NUNCA** viole a arquitetura hexagonal
2. **SEMPRE** implemente testes antes ou junto com o código
3. **JAMAIS** faça merge sem 90% de cobertura de testes
4. **OBRIGATÓRIO** revisar código com foco em arquitetura
5. **SEMPRE** documente APIs com OpenAPI 3.0
6. **NUNCA** coloque lógica de negócio em Controllers
7. **SEMPRE** use interfaces para dependencies entre camadas
8. **NUNCA** acesse diretamente repositórios JPA do domínio

> **Lembre-se**: Qualidade não é negociável. Código sem testes é código quebrado esperando para acontecer.
